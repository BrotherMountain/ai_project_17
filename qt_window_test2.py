# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'qt_test2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QCheckBox, QLCDNumber, QGridLayout, QGroupBox, \
    QVBoxLayout, QHBoxLayout, QSlider
from PyQt5.QtCore import Qt
import cv2
from PyQt5 import QtGui, QtWidgets, QtCore
from PyQt5.QtCore import QThread, Qt, pyqtSignal, pyqtSlot, QTimer
from PyQt5.QtGui import QImage, QPixmap

"""
카메라 연결 오류로 인해서 주석처리
class Thread(QThread):
    changePixmap = pyqtSignal(QImage)

    def run(self):
        self.cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
        while True:
            ret, frame = self.cap.read()
            if ret:
                # https://stackoverflow.com/a/55468544/6622587
                rgbImage = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                h, w, ch = rgbImage.shape
                bytesPerLine = ch * w
                convertToQtFormat = QImage(rgbImage.data, w, h, bytesPerLine, QImage.Format_RGB888)
                p = convertToQtFormat.scaled(640, 480, Qt.KeepAspectRatio)
                self.changePixmap.emit(p)
"""

class Ui_test():
    """
    @pyqtSlot(QImage)
    def setImage(self, image):
        self.camera.setPixmap(QPixmap.fromImage(image))

    def camera_online(self):
        th = Thread()
        th.changePixmap.connect(self.setImage)
        th.start()

    def camera_offline(self):
        app.cap.release()
        app.cv2.destroyAllWindows()

    """
    def setupUi(self, test):
        test.setObjectName("test")
        test.resize(1072, 690)
        self.centralwidget = QtWidgets.QWidget(test)
        self.centralwidget.setObjectName("centralwidget")

        self.camera_line = QtWidgets.QGroupBox(self.centralwidget)
        self.camera_line.setGeometry(QtCore.QRect(10, 10, 761, 441))
        self.camera_line.setObjectName("camera_line")

        self.camera_on = QtWidgets.QPushButton(self.camera_line)
        self.camera_on.setGeometry(QtCore.QRect(10, 20, 371, 31))
        self.camera_on.setObjectName("camera_on")

        # self.camera_on.clicked.connect(self.camera_online)

        self.camera_off = QtWidgets.QPushButton(self.camera_line)
        self.camera_off.setGeometry(QtCore.QRect(380, 20, 371, 31))
        self.camera_off.setObjectName("camera_off")

        # self.camera_off.clicked.connect(self.camera_online)

        self.camera = QtWidgets.QLabel(self.camera_line)
        self.camera.setGeometry(QtCore.QRect(10, 50, 640, 480))
        self.camera.setObjectName("camera")

        self.waiting_line = QtWidgets.QGroupBox(self.centralwidget)
        self.waiting_line.setGeometry(QtCore.QRect(780, 460, 281, 171))
        self.waiting_line.setObjectName("waiting_line")

        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.waiting_line)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(10, 20, 261, 141))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")

        self.waiting_vbox = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.waiting_vbox.setContentsMargins(0, 0, 0, 0)
        self.waiting_vbox.setObjectName("waiting_vbox")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")

        self.mask_waiting = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.mask_waiting.setObjectName("mask_waiting")
        self.horizontalLayout_5.addWidget(self.mask_waiting)

        self.mask_time = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.mask_time.setObjectName("mask_time")

        self.horizontalLayout_5.addWidget(self.mask_time)
        self.waiting_vbox.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.decibel_waiting = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.decibel_waiting.setObjectName("decibel_waiting")

        self.horizontalLayout_6.addWidget(self.decibel_waiting)
        self.decibel_time = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.decibel_time.setObjectName("decibel_time")

        self.horizontalLayout_6.addWidget(self.decibel_time)
        self.waiting_vbox.addLayout(self.horizontalLayout_6)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")

        self.movement_waiting = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.movement_waiting.setObjectName("movement_waiting")

        self.horizontalLayout_4.addWidget(self.movement_waiting)
        self.movement_time = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.movement_time.setObjectName("movement_time")

        self.horizontalLayout_4.addWidget(self.movement_time)
        self.waiting_vbox.addLayout(self.horizontalLayout_4)
        self.state_line = QtWidgets.QGroupBox(self.centralwidget)
        self.state_line.setGeometry(QtCore.QRect(10, 460, 761, 171))
        self.state_line.setObjectName("state_line")

        self.function_line = QtWidgets.QGroupBox(self.centralwidget)
        self.function_line.setGeometry(QtCore.QRect(780, 10, 281, 441))
        self.function_line.setObjectName("function_line")

        self.verticalLayoutWidget = QtWidgets.QWidget(self.function_line)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 30, 261, 391))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")

        self.function_vbox = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.function_vbox.setContentsMargins(0, 0, 0, 0)
        self.function_vbox.setObjectName("function_vbox")

        self.mask_detect = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.mask_detect.setObjectName("mask_detect")

        self.function_vbox.addWidget(self.mask_detect)
        self.mask_hbox = QtWidgets.QHBoxLayout()
        self.mask_hbox.setObjectName("mask_hbox")

        self.mask_slider = QtWidgets.QSlider(self.verticalLayoutWidget)
        self.mask_slider.setOrientation(QtCore.Qt.Horizontal)
        self.mask_slider.setObjectName("mask_slider")
        self.mask_hbox.addWidget(self.mask_slider)

        self.mask_lcd = QtWidgets.QLCDNumber(self.verticalLayoutWidget)
        self.mask_lcd.setObjectName("mask_lcd")
        self.mask_lcd.display(1)

        self.mask_hbox.addWidget(self.mask_lcd)

        self.mask_slider.setRange(1, 50)
        self.mask_slider.setSingleStep(1)
        self.mask_slider.valueChanged.connect(self.mask_lcd.display)

        self.function_vbox.addLayout(self.mask_hbox)

        self.decibel_detect = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.decibel_detect.setObjectName("decibel_detect")
        self.function_vbox.addWidget(self.decibel_detect)
        self.decibel_hbox = QtWidgets.QHBoxLayout()
        self.decibel_hbox.setObjectName("decibel_hbox")

        self.decibel_slider = QtWidgets.QSlider(self.verticalLayoutWidget)
        self.decibel_slider.setOrientation(QtCore.Qt.Horizontal)
        self.decibel_slider.setObjectName("decibel_slider")
        self.decibel_hbox.addWidget(self.decibel_slider)

        self.decibel_lcd = QtWidgets.QLCDNumber(self.verticalLayoutWidget)
        self.decibel_lcd.setObjectName("decibel_lcd")
        self.decibel_lcd.display(1)

        self.decibel_hbox.addWidget(self.decibel_lcd)

        self.decibel_slider.setRange(1, 50)
        self.decibel_slider.setSingleStep(1)
        self.decibel_slider.valueChanged.connect(self.decibel_lcd.display)

        self.function_vbox.addLayout(self.decibel_hbox)

        self.movement_detect = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.movement_detect.setObjectName("movement_detect")
        self.function_vbox.addWidget(self.movement_detect)

        self.movement_hbox = QtWidgets.QHBoxLayout()
        self.movement_hbox.setObjectName("movement_hbox")

        self.movement_slider = QtWidgets.QSlider(self.verticalLayoutWidget)
        self.movement_slider.setOrientation(QtCore.Qt.Horizontal)
        self.movement_slider.setObjectName("movement_slider")

        self.movement_hbox.addWidget(self.movement_slider)

        self.movement_lcd = QtWidgets.QLCDNumber(self.verticalLayoutWidget)
        self.movement_lcd.setObjectName("movement_lcd")
        self.movement_lcd.display(1)

        self.movement_hbox.addWidget(self.movement_lcd)

        self.movement_slider.setRange(1, 50)
        self.movement_slider.setSingleStep(1)
        self.movement_slider.valueChanged.connect(self.movement_lcd.display)

        self.function_vbox.addLayout(self.movement_hbox)

        self.save_run_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.save_run_button.setObjectName("save_run_button")
        self.function_vbox.addWidget(self.save_run_button)

        self.save_run_button.clicked.connect(self.startTimer)

        test.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(test)
        self.statusbar.setObjectName("statusbar")
        test.setStatusBar(self.statusbar)
        self.menubar = QtWidgets.QMenuBar(test)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1072, 26))
        self.menubar.setObjectName("menubar")
        self.menumenu = QtWidgets.QMenu(self.menubar)
        self.menumenu.setObjectName("menumenu")
        test.setMenuBar(self.menubar)
        self.actionsavew = QtWidgets.QAction(test)
        self.actionsavew.setObjectName("actionsavew")
        self.menumenu.addAction(self.actionsavew)
        self.menubar.addAction(self.menumenu.menuAction())

        self.retranslateUi(test)
        QtCore.QMetaObject.connectSlotsByName(test)

    def retranslateUi(self, test):
        _translate = QtCore.QCoreApplication.translate
        test.setWindowTitle(_translate("test", "test"))
        self.camera_line.setTitle(_translate("test", "카메라 연결 화면"))
        self.camera_on.setText(_translate("test", "카메라 연결"))
        self.camera_off.setText(_translate("test", "카메라 끄기"))
        self.waiting_line.setTitle(_translate("test", "재알림 대기시간"))
        self.mask_waiting.setText(_translate("test", "마스크 감지"))
        self.mask_time.setText(_translate("test", "00:00"))

        self.decibel_waiting.setText(_translate("test", "소음 감지"))
        self.decibel_time.setText(_translate("test", "00:00"))

        self.movement_waiting.setText(_translate("test", "마스크 미착욤 감지"))
        self.movement_time.setText(_translate("test", "00:00"))

        self.state_line.setTitle(_translate("test", "상태창"))
        self.function_line.setTitle(_translate("test", "세부기능 및 알람간격 설정"))
        self.mask_detect.setText(_translate("test", "마스크감지"))
        self.decibel_detect.setText(_translate("test", "소음감지"))

        self.movement_detect.setText(_translate("test", "마스크 미착용 움직임 감지"))
        self.save_run_button.setText(_translate("test", "저장 및 실행"))
        self.menumenu.setTitle(_translate("test", "메뉴"))
        self.actionsavew.setText(_translate("test", "test"))
        self.actionsavew.setIconText(_translate("test", "test"))

    def startTimer(self):
        print(self.mask_slider.value())
        print(self.decibel_slider.value())
        print(self.movement_slider.value())
        print(self.mask_detect.isChecked())
        print(self.decibel_detect.isChecked())
        print(self.movement_detect.isChecked())

        self.minute_1 = self.mask_slider.value() - 1
        self.minute_2 = self.decibel_slider.value() - 1
        self.minute_3 = self.movement_slider.value() - 1

        self.second = 60

        self.myTimer = QtCore.QTimer()
        self.myTimer.timeout.connect(self.timerTimeout)
        self.myTimer.start(1000)

    def timerTimeout(self):
        self.second -= 1

        if self.second == 0:
            self.second = 60
            if self.minute_1 == 0:
                self.mask_time.setText("00:00")
            if self.minute_2 == 0:
                self.decibel_time.setText("00:00")
            if self.minute_3 == 0:
                self.movement_time.setText("00:00")
            if self.minute_1 <= -1 and self.minute_2 <= -1 and self.minute_3 <= -1:
                self.myTimer.stop()
            self.minute_1 -= 1
            self.minute_2 -= 1
            self.minute_3 -= 1
        self.update_gui()

    def update_gui(self):
        if self.minute_1 >= 0 and self.mask_detect.isChecked():
            self.mask_time.setText(str(self.minute_1) + ":" + str(self.second))
        if self.minute_2 >= 0 and self.decibel_detect.isChecked():
            self.decibel_time.setText(str(self.minute_2) + ":" + str(self.second))
        if self.minute_3 >= 0 and self.movement_detect.isChecked():
            self.movement_time.setText(str(self.minute_3) + ":" + str(self.second))

    def function1(self, state):
        pass

    def function2(self, state):
        pass

    def function3(self, state):
        pass


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    test = QtWidgets.QMainWindow()
    ui = Ui_test()
    ui.setupUi(test)
    test.show()
    sys.exit(app.exec_())
